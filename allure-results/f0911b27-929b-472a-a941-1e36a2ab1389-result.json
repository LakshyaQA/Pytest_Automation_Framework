{"name": "test_login_with_invalid_usrname_pwd", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff71fb11eb5+80197]\n\tGetHandleVerifier [0x0x7ff71fb11f10+80288]\n\t(No symbol) [0x0x7ff71f8902fa]\n\t(No symbol) [0x0x7ff71f8e7cd7]\n\t(No symbol) [0x0x7ff71f8e7f9c]\n\t(No symbol) [0x0x7ff71f93ba87]\n\t(No symbol) [0x0x7ff71f9103bf]\n\t(No symbol) [0x0x7ff71f9387fb]\n\t(No symbol) [0x0x7ff71f910153]\n\t(No symbol) [0x0x7ff71f8d8b02]\n\t(No symbol) [0x0x7ff71f8d98d3]\n\tGetHandleVerifier [0x0x7ff71fdce83d+2949837]\n\tGetHandleVerifier [0x0x7ff71fdc8c6a+2926330]\n\tGetHandleVerifier [0x0x7ff71fde86c7+3055959]\n\tGetHandleVerifier [0x0x7ff71fb2cfee+191102]\n\tGetHandleVerifier [0x0x7ff71fb350af+224063]\n\tGetHandleVerifier [0x0x7ff71fb1af64+117236]\n\tGetHandleVerifier [0x0x7ff71fb1b119+117673]\n\tGetHandleVerifier [0x0x7ff71fb010a8+11064]\n\tBaseThreadInitThunk [0x0x7ffee2a2e8d7+23]\n\tRtlUserThreadStart [0x0x7ffee3ba8d9c+44]", "trace": "self = <test_login.TestLogin object at 0x0000020CE7F9C910>\n\n    @pytest.mark.order(2)\n    def test_login_with_invalid_usrname_pwd(self):\n        self.cl.info(\"************  Test Case Started : Portal Login  **********\")\n>       self.lp.login(\"mainnahidungaemail@address.com\", \"123456\")\n\nAeye\\Testcases\\home_test\\test_login.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nCommon_Packages\\Decorators\\decorators.py:12: in wrapper\n    return func(self, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAeye\\pageObject\\home_page\\LoginPage.py:48: in login\n    self.login_verification()\nCommon_Packages\\Decorators\\decorators.py:12: in wrapper\n    return func(self, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAeye\\pageObject\\home_page\\LoginPage.py:81: in login_verification\n    return self.verify_by_element_presence(locator=self._actual_result_element, locator_type=\"id\",\nCommon_Packages\\Base\\selenium_drivers.py:565: in verify_by_element_presence\n    element = wait.until(EC.presence_of_element_located((by_type, locator)))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"6356601e393f69fcd89b8144158be68f\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x0000020CE80416C0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff71fb11eb5+80197]\nE       \tGetHandleVerifier [0x0x7ff71fb11f10+80288]\nE       \t(No symbol) [0x0x7ff71f8902fa]\nE       \t(No symbol) [0x0x7ff71f8e7cd7]\nE       \t(No symbol) [0x0x7ff71f8e7f9c]\nE       \t(No symbol) [0x0x7ff71f93ba87]\nE       \t(No symbol) [0x0x7ff71f9103bf]\nE       \t(No symbol) [0x0x7ff71f9387fb]\nE       \t(No symbol) [0x0x7ff71f910153]\nE       \t(No symbol) [0x0x7ff71f8d8b02]\nE       \t(No symbol) [0x0x7ff71f8d98d3]\nE       \tGetHandleVerifier [0x0x7ff71fdce83d+2949837]\nE       \tGetHandleVerifier [0x0x7ff71fdc8c6a+2926330]\nE       \tGetHandleVerifier [0x0x7ff71fde86c7+3055959]\nE       \tGetHandleVerifier [0x0x7ff71fb2cfee+191102]\nE       \tGetHandleVerifier [0x0x7ff71fb350af+224063]\nE       \tGetHandleVerifier [0x0x7ff71fb1af64+117236]\nE       \tGetHandleVerifier [0x0x7ff71fb1b119+117673]\nE       \tGetHandleVerifier [0x0x7ff71fb010a8+11064]\nE       \tBaseThreadInitThunk [0x0x7ffee2a2e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffee3ba8d9c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "screenshot", "source": "eba641f2-772b-4902-b153-9ddf7e7df65e-attachment.png", "type": "image/png"}, {"name": "log", "source": "83740913-dd81-4c7a-b8ed-730b7b842854-attachment.txt", "type": "text/plain"}], "start": 1759090714573, "stop": 1759090750292, "uuid": "d8389348-3ac8-414f-9b74-6424bbe4f0ac", "historyId": "8895e0768ebb6c6e46bddbc629b8071f", "testCaseId": "8895e0768ebb6c6e46bddbc629b8071f", "fullName": "Aeye.Testcases.home_test.test_login.TestLogin#test_login_with_invalid_usrname_pwd", "labels": [{"name": "parentSuite", "value": "Aeye.Testcases.home_test"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "lakshya757"}, {"name": "thread", "value": "15628-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Aeye.Testcases.home_test.test_login"}], "titlePath": ["Aeye", "Testcases", "home_test", "test_login.py", "TestLogin"]}